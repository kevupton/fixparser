image: node:latest

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/

before_script:
  - node -v
  - npm -v
  - npm ci --cache .npm --prefer-offline

stages:
  - build
  - test
  - performance
  - deploy

lint:
  stage: build
  needs: []
  script:
    - npm run lint

build:
  stage: build
  needs: []
  script:
    - npm run build

test:
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  needs: []
  script:
    - npm test
  artifacts:
    when: always
    reports:
      junit:
        - test-reports/jest-junit.xml
      cobertura:
        - test-reports/cobertura-coverage.xml

performance:
  stage: test
  needs: ['build', 'test']
  script:
    - npm run build && npm run perf
  when: manual
  allow_failure: true

pages:
  stage: deploy
  needs: ['build', 'test']
  script:
    - cd dashboard && npm ci && npm rebuild node-sass && npm run build && cd ..
    - mkdir .public
    - cp dashboard/build/*.woff .public
    - cp dashboard/build/*.woff2 .public
    - cp dashboard/build/dashboard.* .public
    - cp dashboard/build/index.html .public
    - mv .public public
  artifacts:
    paths:
      - public
  only:
    - main

npm_fixparser:
  stage: deploy
  needs: ['build', 'test']
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG =~ /^release-\d+.\d+.\d+/
      changes:
        - package.json
  script:
    # If no .npmrc if included in the repo, generate a temporary one that is configured to publish to public NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
      fi
    - echo "Created .npmrc with auth token..."

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm run build
        npm run prettier
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to the NPM registry."
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

npm_dashboard:
  stage: deploy
  needs: ['build', 'test']
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG =~ /^release-\d+.\d+.\d+/
      changes:
        - dashboard/package.json
  script:
    - cd dashboard

    # If no .npmrc if included in the repo, generate a temporary one that is configured to publish to public NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
      fi
    - echo "Created .npmrc with auth token..."

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm ci && npm rebuild node-sass && npm run build
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to the NPM registry."
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
